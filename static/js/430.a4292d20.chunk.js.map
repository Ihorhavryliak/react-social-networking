{"version":3,"file":"static/js/430.a4292d20.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/Mypost/Mypost.module.css?e854","webpack://my-app/./src/components/Profile/Mypost/Post/Post.module.css?70cb","components/Profile/Mypost/Post/Post.jsx","components/Profile/Mypost/Mypost.jsx","components/Profile/Mypost/MyPostContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"image\":\"ProfileInfo_image__T+1yF\",\"descri_pbloxk\":\"ProfileInfo_descri_pbloxk__JSjKr\",\"mainPhoto\":\"ProfileInfo_mainPhoto__yKNrr\",\"contact\":\"ProfileInfo_contact__OKpLI\",\"formSUmmeryError\":\"ProfileInfo_formSUmmeryError__2VW3a\"};","import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\n\n\nconst ProfileStatusWithHooks = (props) => {\n\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n  \n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status])\n\n\n  const activateMode = () => {\n    setEditMode(true);\n  };\n\n  let deActivateAditMod = () => {\n   setEditMode(false);\n   props.upDateStatuses(status);\n  };\n\n  const onStatusChange = (e) => {\n    setStatus(e.currentTarget.value);\n}\n\n  return (\n    <div>\n      {!editMode &&\n        <div>\n        <b>Status</b>:  <span onDoubleClick={activateMode}>{props.status || '----'}</span>\n        </div>\n      }\n      {editMode &&\n        <div >\n       <b>Status</b>:   <input onChange={onStatusChange} autoFocus={true} onBlur={deActivateAditMod}\n            value={status}></input>\n        </div>\n      }\n    </div>\n  )\n\n}\n\n\n\nexport default ProfileStatusWithHooks;","import { reduxForm } from \"redux-form\"\r\nimport { creatField, Input, Textarea } from \"../../Common/Preloader/FormControl/FormsControl\"\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {  return (\r\n    <form onSubmit={handleSubmit}>\r\n {error && <div className={s.formSUmmeryError}>{error}</div>}  \r\n      <div>\r\n        <div><button>Save</button> </div>\r\n        <div>\r\n          <b>Full Name</b>: {creatField('FullName', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n          <b>Looking a job:</b>\r\n          {creatField('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\r\n          </div>\r\n    \r\n            <div>\r\n              <b>My profesion skils</b>:\r\n              {creatField('My profesion skils', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n\r\n          <div />\r\n          <div>\r\n            <b>About me</b> :\r\n            {creatField('About me', 'aboutMe', [], Textarea)}\r\n          </div>\r\n          <div>\r\n        <b>Contacts</b>: \r\n        {Object.keys(profile.contacts).map((key ,id) => {\r\n        return  <div key={key} className={s.contacts}> \r\n        <b>{key}:{creatField(key, 'contacts.' + key, [], Input)}</b>\r\n        </div>\r\n      })}\r\n      </div>\r\n      </div>\r\n      </form>\r\n  )\r\n}\r\nconst ProfileDataFormRedaXForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataFormRedaXForm;","import Preloader from '../../Common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/image-user.png'\r\nimport { useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\n\r\nconst ProfileInfo = ({ profile, status, upDateStatuses, isOwner, savePhoto , saveProfile}) => {\r\n  const [editMode, setEditMode]  = useState(false)\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n  \r\n  const mainPhotoSelect = (e) => {\r\n    if (e.target.files.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n  \r\n  const getFormDta = async (values) => {\r\n  saveProfile(values).then(\r\n   () => { setEditMode(false)}\r\n  )\r\n \r\n   \r\n   }\r\n\r\n\r\n\r\n  return (\r\n    <div >\r\n      <div className={s.descri_pbloxk}>\r\n        <img alt='photos' src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n\r\n        {isOwner && <input type={'file'} onChange={mainPhotoSelect} />}\r\n\r\n        <ProfileStatusWithHooks status={status} upDateStatuses={upDateStatuses} />\r\n\r\n        {editMode ? <ProfileDataForm initialValues={profile} onSubmit={getFormDta} profile={profile} /> \r\n        :  <ProfileData goToEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner} />}\r\n       \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ProfileData =({profile, isOwner, goToEditMode}) => {\r\n  return (\r\n      <div> \r\n        {isOwner &&  <div> <button onClick={goToEditMode}>Edit</button></div>}\r\n         \r\n    <div>\r\n      <b>Full Name</b>: {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking a job:</b>  {profile.lookingForAJob === true ? 'yes' : 'no'}\r\n    </div>\r\n    <div>\r\n      {profile.lookingForAJobDescription &&\r\n        <div>\r\n          <b>My profesion skils</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      }\r\n      <div />\r\n      <div>\r\n        <b>About me</b> : {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>: \r\n        {Object.keys(profile.contacts).map((key ,id) => {\r\n        return  <Contact key={id + key} contactTitle={key}  contactValua={profile.contacts[key]} />\r\n      })}\r\n      </div>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\n\r\n \r\nconst Contact = ({contactTitle, contactValua}) => {\r\n  return (\r\n    <div className={s.contact} >\r\n      <b >{contactTitle}</b>: {contactValua}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"Mypost_postBlock__C34LJ\",\"post\":\"Mypost_post__P229j\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__+xHEG\"};","import se from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n  return (\r\n            <div className={se.item}>\r\n              <img alt=\"users\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRQG84i10xhs06HlEh2T3aDrrOsG8E1esNT7w&usqp=CAU\"></img>\r\n              {props.messege}\r\n              <div>\r\n                <span>Like</span>\r\n                <span>Like Count: {props.count}</span>\r\n              </div>\r\n              \r\n            </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import se from './Mypost.module.css';\r\nimport Post from './Post/Post';\r\nimport React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, reqiaret } from '../../../utils/validator';\r\nimport { Textarea } from '../../Common/Preloader/FormControl/FormsControl';\r\n\r\nconst maxLenght10 = maxLengthCreator(10);\r\n\r\nconst Mypost = React.memo(props => {\r\n\r\n  let dialogElements = props.postDate.map(phra =>\r\n    (<Post messege={phra.name} key={phra.id} count={phra.count} />));\r\n    \r\n  const onAddPost = (values) => {\r\n    props.adPost(values.newPostText);\r\n  }\r\n\r\n  return (\r\n    <div className={se.postBlock}>\r\n      <h3 className={se.myPost}>\r\n        my pos\r\n      </h3>\r\n      <div>\r\n        <GetFormDateDedux onSubmit={onAddPost} />\r\n      </div>\r\n      <div className={se.post}>\r\n        {dialogElements}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n});\r\n\r\n//forma\r\nconst AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} name={'newPostText'} placeholder={'Enter your messege'}\r\n          validate={[reqiaret, maxLenght10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nconst GetFormDateDedux = reduxForm({ form: 'profileAddNewPostForm' })(AddNewPostForm)\r\n\r\nexport default Mypost;","import { adPostActionCreat } from '../../../redux/profile_reducer'\r\nimport Mypost from './Mypost';\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    postDate: state.profilePage.postDate,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nconst mapDispachToProps = (dispatch) => {\r\n  return {\r\n    adPost: (newPostText) => { dispatch(adPostActionCreat(newPostText)); }\r\n  }\r\n}\r\n\r\n\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispachToProps)(Mypost);\r\n\r\nexport default MyPostContainer;","import ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostContainer from './Mypost/MyPostContainer'\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div >\r\n      <ProfileInfo profile={props.profile} \r\n      savePhoto={props.savePhoto}\r\n       isOwner={props.isOwner} \r\n       saveProfile={props.saveProfile}\r\n      status={props.status} upDateStatuses={props.upDateStatuses}/>\r\n      <MyPostContainer />\r\n  </div>\r\n  )\r\n}\r\nexport default Profile","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getStatus, getUserProfile, savePhoto, saveProfile, upDateStatuses } from '../../redux/profile_reducer';\r\nimport Profile from './Profile';\r\nimport withRouter from '../../hoc/withProfileUrl';\r\nimport { compose } from 'redux';\r\nimport { Navigate} from \"react-router-dom\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n  refreshProfile() {\r\n    let userId = this.props.router.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authoraizerUserId;\r\n      /*   if (!userId) {\r\n          return <Navigate to='/login' />\r\n        } */\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let userId = this.props.router.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authoraizerUserId;\r\n      if (!userId) {\r\n        return <Navigate to='/login' />\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div >\r\n        <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n          isOwner={!this.props.router.params.userId}\r\n          upDateStatuses={this.props.upDateStatuses}\r\n          savePhoto={this.props.savePhoto}\r\n          saveProfile={this.props.saveProfile}\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authoraizerUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n  })\r\n}\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, upDateStatuses, savePhoto, saveProfile }),\r\n  withRouter\r\n /*  withAuthRedirect */)(ProfileContainer);"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","upDateStatuses","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","creatField","Input","type","Textarea","Object","keys","contacts","map","key","id","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValua","savePhoto","saveProfile","Preloader","getFormDta","values","then","alt","src","photos","large","userPhoto","target","files","length","initialValues","se","messege","count","maxLenght10","maxLengthCreator","Mypost","React","dialogElements","postDate","phra","name","GetFormDateDedux","adPost","newPostText","Field","component","placeholder","validate","reqiaret","connect","state","profilePage","dispatch","adPostActionCreat","ProfileContainer","userId","this","router","params","authoraizerUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","to","compose","auth","isAuth","withRouter"],"sourceRoot":""}