{"version":3,"file":"static/js/523.5b341ade.chunk.js","mappings":"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","sources":["webpack://my-app/./src/pages/chat/chat.module.css?e9fc","pages/chat/AdMesegeForm.tsx","pages/chat/Messege.tsx","pages/chat/Messages.tsx","pages/chat/Chat.tsx","pages/chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"texareaChat\":\"chat_texareaChat__7UwRi\",\"texareaErrorText\":\"chat_texareaErrorText__rKZUZ\",\"texareaFieldChat\":\"chat_texareaFieldChat__-RTfL\",\"my\":\"chat_my__WU1rR\",\"nameChat\":\"chat_nameChat__8ZUce\",\"textMessageChat\":\"chat_textMessageChat__UjD3C\",\"anotherUser\":\"chat_anotherUser__4bEN6\",\"blockChat\":\"chat_blockChat__ZOrKX\",\"photoChat\":\"chat_photoChat__WADRW\",\"refChat\":\"chat_refChat__395Vl\",\"scroolChat\":\"chat_scroolChat__tAp9i\",\"mainChatContainer\":\"chat_mainChatContainer__vtRQ5\"};","import { Button } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { sendMessege } from \"../../redux/chat-reducer\";\nimport { AppDispatch, AppStateType } from \"../../redux/redux-store\";\nimport s from '../chat/chat.module.css'\n\nexport const AdMesegeForm: React.FC = () => {\n  const [message, setMessage] = useState('');\n  const dispatch: AppDispatch = useDispatch();\n  const status = useSelector((state: AppStateType) => state.chat.status);\n  const [error, setError] = useState<{len?: string}>({})\n\n  useEffect(()=>{\n    if(message.length === 1) {\n      setError({len: ''}) \n    }\n  },[message])\n\n  const sendMessegeHandle = () => {\n    if (message.length <= 0) {\n      setError({len: 'Require'}) \n      return null\n    } else {\n      setError({len: ''}) \n    }\n    dispatch(sendMessege(message));\n    setMessage('');\n  };\n\n  return (\n    <div>\n      <div className={s.texareaChat}>\n        <textarea className={s.texareaFieldChat} onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\n       <span className={s.texareaErrorText}>{error.len && error.len}</span> \n      </div>\n      <div>\n        <Button disabled={status !== 'ready'} onClick={sendMessegeHandle}>Send</Button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChatMessaeAPIType } from \"../../api/chat-api\";\nimport { getMyUserId } from \"../../redux/chat-selector\";\nimport s from '../chat/chat.module.css'\nimport userPhoto from './../../assets/images/image-user.png'\n\nexport const Messege: React.FC<{ message: ChatMessaeAPIType; }> = React.memo(({ message }) => {\n  const muId = useSelector(getMyUserId)\n\n  let myPhoto;\n  if (message.photo === null) {\n    myPhoto = userPhoto\n  } else {\n    myPhoto = message.photo\n  }\n\n\n  return (\n    <>\n      {muId === message.userId ?\n        <div className={s.my}>\n          <img className={s.photoChat} alt={message.userName} src={myPhoto} />\n          <span className={s.nameChat}>{message.userName}</span>\n          <div className={s.textMessageChat} >\n            {message.message}\n          </div >\n        </div>\n        : <div className={s.anotherUser}>\n              <img className={s.photoChat} alt={message.userName} src={myPhoto} />\n          <span className={s.nameChat}>{message.userName}</span>\n          <div className={s.textMessageChat} >\n            {message.message}\n          </div >\n        </div>}\n    </>\n  );\n});\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { Messege } from \"./Messege\";\nimport s from '../chat/chat.module.css'\n\nexport const Messages: React.FC = React.memo(() => {\n\n  const message = useSelector((state: AppStateType) => state.chat.message);\n  const messegAncorRef = useRef<HTMLDivElement>(null);\n\n  const [scloor, setScloor] = useState(0)\n  const [isAtutoScroll, setAtutoScrollIs] = useState(true);\n\n  \n  const scrolHanfar = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n      const element = e.currentTarget;\n      setScloor(element.scrollHeight)\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\n      !isAtutoScroll && setAtutoScrollIs(true);\n    } else {\n      isAtutoScroll && setAtutoScrollIs(false);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(()=>{\n      messegAncorRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, 500)\n     \n  }, [message]);\n\n  return (\n    <div className={s.scroolChat} style={{ height: '400px', overflowY: 'auto' }} onScroll={(e)=> setScloor(e.currentTarget.scrollHeight)}>\n      {message.map((m: any, index) => <Messege key={m.id} message={m} />)}\n      <div className={s.refChat} ref={messegAncorRef}>\n      </div>\n    </div>\n  );\n});\n\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { startMessageLisiner, stopMessageLisiner } from \"../../redux/chat-reducer\";\nimport { AppDispatch, AppStateType } from \"../../redux/redux-store\";\nimport { AdMesegeForm } from \"./AdMesegeForm\";\nimport { Messages } from \"./Messages\";\nimport s from '../chat/chat.module.css'\n\n\nexport const Chat: React.FC = () => {\n\n  const dispatch: AppDispatch = useDispatch();\n  const status = useSelector((state: AppStateType) => state.chat.status);\n  const messege = useSelector((state: AppStateType) => state.chat.message);\n\n\n  useEffect(() => {\n    dispatch(startMessageLisiner());\n    return () => {\n      dispatch(stopMessageLisiner());\n    };\n  }, []);\n\n  return (\n    <div className={s.blockChat}>\n      {status === \"error\" && <div> Some erorr. Refresh page please</div>}\n        <Messages />\n        <AdMesegeForm />\n    </div>\n  );\n};\n","import React from \"react\"\nimport { useSelector } from \"react-redux\";\nimport Preloader from \"../../components/Common/Preloader/Preloader\";\nimport { LoginPage } from \"../../components/Login/LoginPage\";\nimport { getisAiuth } from \"../../redux/chat-selector\";\nimport { getSsFeching } from \"../../redux/user-selectors\";\nimport { Chat } from \"./Chat\"\nimport s from '../chat/chat.module.css'\n\nconst ChatPage: React.FC = () => {\n  let title = 'Shared chat (web sockets)'\n  document.title = title;\n  const isAuth = useSelector(getisAiuth)\n  const isDialogsLoads = useSelector(getSsFeching);\n\n  if (!isAuth) {\n    return <LoginPage />\n  }\n\n  return (<>\n    {isDialogsLoads && <Preloader />}\n    <div className={s.mainChatContainer}>\n      <h1>{title}</h1>\n      <Chat />\n    </div></>\n  )\n}\n\n\n\nexport default ChatPage"],"names":["AdMesegeForm","useState","message","setMessage","dispatch","useDispatch","status","useSelector","state","chat","error","setError","useEffect","length","len","className","s","onChange","e","currentTarget","value","disabled","onClick","sendMessege","Messege","React","myPhoto","muId","getMyUserId","photo","userPhoto","userId","alt","userName","src","Messages","messegAncorRef","useRef","setScloor","setTimeout","current","scrollIntoView","behavior","style","height","overflowY","onScroll","scrollHeight","map","m","index","id","ref","Chat","startMessageLisiner","stopMessageLisiner","title","document","isAuth","getisAiuth","isDialogsLoads","getSsFeching","Preloader","LoginPage"],"sourceRoot":""}