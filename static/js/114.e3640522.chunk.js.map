{"version":3,"file":"static/js/114.e3640522.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","redux/profile-selectors.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/Mypost/Mypost.module.css?e854","webpack://my-app/./src/components/Profile/Mypost/Post/Post.module.css?70cb","components/Profile/Mypost/Post/Post.tsx","components/Profile/Mypost/AddNewPostForm.tsx","components/Profile/Mypost/Mypost.tsx","components/Profile/Profile.tsx","hoc/withProfileUrl.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"image\":\"ProfileInfo_image__T+1yF\",\"descri_pbloxk\":\"ProfileInfo_descri_pbloxk__JSjKr\",\"mainPhoto\":\"ProfileInfo_mainPhoto__yKNrr\",\"contact\":\"ProfileInfo_contact__OKpLI\",\"formSUmmeryError\":\"ProfileInfo_formSUmmeryError__2VW3a\",\"blockDescripsin\":\"ProfileInfo_blockDescripsin__KWEiY\",\"sectionInformation\":\"ProfileInfo_sectionInformation__dRlIT\",\"status\":\"ProfileInfo_status__96uhI\",\"statusName\":\"ProfileInfo_statusName__iPCW4\",\"fieldStatus\":\"ProfileInfo_fieldStatus__FeOAE\",\"fieldStatusActivate\":\"ProfileInfo_fieldStatusActivate__dQ8F3\",\"file\":\"ProfileInfo_file__6OYNW\",\"containerFileGrid\":\"ProfileInfo_containerFileGrid__9gQhu\",\"profileEditForm\":\"ProfileInfo_profileEditForm__EuU+f\",\"windowForm\":\"ProfileInfo_windowForm__qvjCG\",\"closeWindow\":\"ProfileInfo_closeWindow__kCZ9k\",\"blockFormUserInfo\":\"ProfileInfo_blockFormUserInfo__vtfPf\"};","import { Input } from \"antd\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { upDateStatuses } from \"../../../redux/profile_reducer\";\nimport { AppDispatch, AppStateType } from \"../../../redux/redux-store\";\nimport style from './ProfileInfo.module.css';\n\ntype ProfileStatusWithHooksType = {\n  status: string\n  upDateStatuses: (status: string) => void\n  isOwner: boolean\n}\n\n\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksType> = (props) => {\n  const dispatch: AppDispatch = useDispatch();\n  const status = useSelector((state: AppStateType) => state.profilePage.status)\n\n  let [editMode, setEditMode] = useState<boolean>(false);\n  let [statuse, setStatus] = useState<string>(status);\n\n  useEffect(() => {\n    setStatus(status);\n  }, [status])\n\n\n  const activateMode = () => {\n    setEditMode(true);\n  };\n\n  const deActivateAditMod = () => {\n    setEditMode(false);\n    dispatch(upDateStatuses(statuse));\n  };\n\n  const onStatusChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value);\n  }\n\n  return (\n\n    <div>\n\n      {!editMode &&\n        <div className={style.status}>\n          {/* <span className={style.statusName}> <b>Status</b>:</span> */} \n          <span>   <Input disabled={!props.isOwner}  className={style.fieldStatus} value={status || 'Your status'} onClick={activateMode} /></span>\n        </div>\n      }\n      {editMode &&\n        <div className={style.status}>\n          {/* <span className={style.statusName}> <b>Status</b>:</span> */}\n          <span>   <Input className={style.fieldStatusActivate} onChange={onStatusChange} autoFocus={true} onBlur={deActivateAditMod}\n            value={statuse} /></span>\n        </div>\n      }\n\n    </div>\n  )\n\n}\n\n\n\nexport default ProfileStatusWithHooks;","import { createPortal } from \"react-dom\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { ProfileType } from \"../../../types/types\";\r\nimport { cantNull, urlLing } from \"../../../utils/validator\";\r\nimport { creatField, GetStringKeysType, Input, Textarea } from \"../../Common/Preloader/FormControl/FormsControl\"\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n  isFecbg: boolean\r\n  closeEditMode: () => void\r\n};\r\ntype ProfileTypeKeys = GetStringKeysType<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType > & PropsType > = ({handleSubmit, profile, closeEditMode, error, isFecbg}) => {  \r\n  if (isFecbg === true) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return createPortal (\r\n    \r\n    <div className={s.windowForm}>\r\n             <span className={s.closeWindow} onClick={closeEditMode}>X</span>\r\n   <form onSubmit={handleSubmit} className={s.profileEditForm}>\r\n  {error && <div className={s.formSUmmeryError}>{error}</div>}  \r\n      <div className={s.blockFormUserInfo}>\r\n        <div>\r\n          <b>Full Name</b>: {creatField<ProfileTypeKeys>('FullName', 'fullName', [cantNull], Input)}\r\n        </div>\r\n        <div>\r\n          <b>Looking a job:</b>\r\n          {creatField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\r\n          </div>\r\n            <div>\r\n              <b>My profesion skils</b>:\r\n              {creatField<ProfileTypeKeys>('My profesion skils', 'lookingForAJobDescription', [cantNull], Textarea)}\r\n            </div>\r\n          <div />\r\n          <div>\r\n            <b>About me</b> :\r\n            {creatField('About me', 'aboutMe', [cantNull], Textarea)}\r\n          </div>\r\n          <div>\r\n        <b>Contacts</b>: \r\n        {Object.keys(profile.contacts).map((key ,id) => {\r\n        return  <div key={key} className={s.contacts}> \r\n        {/* todo: to do something */}\r\n        <b>{key}:{creatField(key, 'contacts.' + key, [urlLing], Input)}</b>\r\n        </div>\r\n      })}\r\n      </div>\r\n      </div>\r\n      <div><button className=\"ant-btn ant-btn-default\" style={{marginTop: '25px'}}>Save</button> </div>\r\n      </form>\r\n      </div>,\r\n      document.getElementById('portal') as Element | DocumentFragment\r\n  )\r\n}\r\n\r\n\r\nconst ProfileDataFormRedaXForm = reduxForm<ProfileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataFormRedaXForm;","import { AppStateType } from \"./redux-store\"\n\nexport const getisSetDate = (state: AppStateType) => {\n  return state.profilePage.isSetDate;\n}","import Preloader from '../../Common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/image-user.png'\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ProfilesType } from '../Profile';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\nimport { Button, Input } from 'antd';\r\nimport { getisSetDate } from '../../../redux/profile-selectors';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { actions } from '../../../redux/profile_reducer';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n\r\nconst ProfileInfo: React.FC<ProfilesType> = ({ profile, status, upDateStatuses, isOwner, savePhoto, saveProfile, isFecbg }) => {\r\n\r\n  const isSetDate = useSelector(getisSetDate);\r\n  const history = useNavigate()\r\n  const dispatch = useDispatch();\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const mainPhotoSelect = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const getFormData = async (values: ProfileType) => {\r\n    saveProfile(values);\r\n  }\r\n\r\n  const goToEditMode = () => {\r\n    dispatch(actions.closeEditForm(true))\r\n  }\r\n  const closeEditMode = () => {\r\n    dispatch(actions.closeEditForm(false))\r\n  }\r\n\r\n  const createChat = (userId: number) => {\r\n    history(`/dialogs/${userId}/`)\r\n  }\r\n\r\n  return (\r\n    <div className={s.sectionInformation} >\r\n      <div>\r\n        <img alt='photos' src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n        <div className={s.containerFileGrid}>\r\n          <div>\r\n            {isOwner ? <Input name='sdd' className={s.file} type={'file'} onChange={mainPhotoSelect} />\r\n              : <div><Button onClick={() => createChat(profile.userId)}>Send Message</Button></div>}\r\n          </div>\r\n          <div>\r\n            {isOwner && <div> <Button onClick={goToEditMode}>Edit information</Button></div>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={s.descri_pbloxk}>\r\n        <ProfileStatusWithHooks status={status} upDateStatuses={upDateStatuses} isOwner={isOwner} />\r\n        {isSetDate ? <ProfileDataForm initialValues={profile} isFecbg={isFecbg} onSubmit={getFormData} closeEditMode={closeEditMode} profile={profile} />\r\n          : <ProfileData profile={profile} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\ntype ProfileDataType = {\r\n  profile: ProfileType,\r\n\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({ profile }) => {\r\n  return (\r\n    <div className={s.blockDescripsin}>\r\n      {profile.fullName && <div>\r\n        <b>Full Name</b> {profile.fullName}\r\n      </div>}\r\n      {profile.lookingForAJob &&\r\n        <div>\r\n          <b>Looking a job:</b>  {profile.lookingForAJob === true ? 'yes' : 'no'}\r\n        </div>\r\n      }\r\n      <div>\r\n        {profile.lookingForAJobDescription &&\r\n          <div>\r\n            <b>My profesion skils</b>: {profile.lookingForAJobDescription}\r\n          </div>\r\n        }\r\n        <div />\r\n        {profile.aboutMe &&\r\n          <div>\r\n            <b>About me</b> : {profile.aboutMe}\r\n          </div>\r\n        }\r\n        {Object.keys(profile.contacts).some(k =>\r\n          profile.contacts[k as keyof ContactsType] !== null && profile.contacts[k as keyof ContactsType].length > 0) &&\r\n          <div>\r\n            <b>Contacts:</b>\r\n            {Object.keys(profile.contacts).map((key, id) => {\r\n              return <Contact key={id + key} contactTitle={key} contactValua={profile.contacts[key as keyof ContactsType]} />\r\n            })}\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Contact: React.FC<ContactType> = ({ contactTitle, contactValua }) => {\r\n  if (!contactValua) return null;\r\n  return (\r\n    <div className={s.contact} >\r\n      <b >{contactTitle}</b>: {contactValua}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\ntype ContactType = {\r\n  contactTitle: string\r\n  contactValua: string\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"Mypost_postBlock__C34LJ\",\"post\":\"Mypost_post__P229j\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__+xHEG\",\"textMessage\":\"Post_textMessage__kY8MH\",\"likeCount\":\"Post_likeCount__Kh0D7\"};","\r\nimport { useSelector } from 'react-redux';\r\nimport { getMyPhoto } from '../../../../redux/dialog-selector';\r\nimport se from './Post.module.css';\r\nimport defaul from '../../../../assets/images/image-user.png'\r\ntype PostType = {\r\n  count: number\r\n  messege: string\r\n \r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n\r\n  const photoMe = useSelector(getMyPhoto);\r\n  \r\n  return (\r\n            <div className={se.item}>\r\n              <img alt=\"users\" src={photoMe ? photoMe : defaul}></img>\r\n          <span className={se.textMessage}>{props.messege}</span>  <span className={se.likeCount}>Likes: {props.count}</span>\r\n              <div>\r\n              </div>\r\n            </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { reqiaret } from '../../../utils/validator';\nimport { creatField, GetStringKeysType, Textarea } from '../../Common/Preloader/FormControl/FormsControl';\nimport { maxLenght10 } from './Mypost';\n\n//forma\ntype AddNewPostFormValuesType = {\n  newPostText: string\n};\n\ntype LoginFormValuesKeysTypeKeys = GetStringKeysType<AddNewPostFormValuesType>;\n\ntype PropsType = {};\n\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormValuesType, PropsType> & PropsType> = (props) => {\n\n  return (\n    <form onSubmit={props.handleSubmit} style={{maxWidth: '500px'}}>\n      <div>\n        {creatField<LoginFormValuesKeysTypeKeys>('Enter your messege', 'newPostText', [reqiaret,maxLenght10], Textarea)}\n      </div>\n      <div>\n        <button style={{float: 'right'}} className=\"ant-btn ant-btn-default\">Add post</button>\n      </div>\n    </form>\n  );\n};\n\nexport const GetFormDateDedux = reduxForm<AddNewPostFormValuesType, PropsType>({ form: 'profileAddNewPostForm' })(AddNewPostForm);\n","import se from './Mypost.module.css';\r\nimport Post from './Post/Post';\r\nimport React, { useState } from 'react';\r\nimport { maxLengthCreator } from '../../../utils/validator';\r\nimport { PostDateType } from '../../../types/types';\r\nimport { GetFormDateDedux } from './AddNewPostForm';\r\nimport { getPostDate } from '../../../redux/dialog-selector';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { actions } from '../../../redux/profile_reducer';\r\nimport { reset } from 'redux-form';\r\n\r\nexport const maxLenght10 = maxLengthCreator(65);\r\n\r\n\r\n\r\nconst Mypost: React.FC = React.memo( (props) => {\r\n  const postDate = useSelector(getPostDate);\r\n  const dispatch = useDispatch();\r\n  let copyPostDate = [...postDate];\r\n  let dialogElements = copyPostDate.reverse().map(phra =>(<Post messege={phra.name} key={phra.id} count={phra.count} />));\r\n\r\n  const onAddPost = (values: {newPostText: string}) => {\r\n   dispatch(actions.adPostActionCreat(values.newPostText));\r\n   dispatch(reset('profileAddNewPostForm'))\r\n  };\r\n\r\n  return (\r\n    <div className={se.postBlock}>\r\n      <h3 className={se.myPost}>\r\n        My posts\r\n      </h3>\r\n      <div>\r\n        <GetFormDateDedux onSubmit={onAddPost} />\r\n      </div>\r\n      <div className={se.post} >\r\n        {dialogElements}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n});\r\n\r\nexport default Mypost;","import ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport { ProfileType } from '../../types/types';\r\nimport Mypost from './Mypost/Mypost';\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { useSelector } from 'react-redux';\r\nimport { getSsFeching } from '../../redux/user-selectors';\r\n\r\n\r\nconst Profile: React.FC<ProfilesType> = (props) => {\r\n\r\n  const isDialogsLoads = useSelector(getSsFeching);\r\n\r\n  return (<>\r\n    {isDialogsLoads && <Preloader />}\r\n    <div >\r\n      <ProfileInfo profile={props.profile}\r\n        savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner}\r\n        saveProfile={props.saveProfile}\r\n        isFecbg={props.isFecbg}\r\n        status={props.status} upDateStatuses={props.upDateStatuses} />\r\n      {props.isOwner ? <Mypost /> : <div style={{ marginTop: '20px' }}>No any posts</div>}\r\n    </div>\r\n    </>\r\n  )\r\n}\r\nexport default Profile\r\n\r\nexport type ProfilesType = {\r\n  profile: ProfileType | null\r\n  savePhoto: (file: File) => void\r\n  isOwner: boolean\r\n  saveProfile: (profile: ProfileType | null) => Promise<any>\r\n  isFecbg: boolean\r\n  status: string\r\n  upDateStatuses: (userId: string) => void\r\n}","import { useLocation, useNavigate, useParams } from \"react-router-dom\";\n\nfunction withRouter <WCT>(Component: React.ComponentType<WCT>) { \n  function ComponentWithRouterProp(props: WCT) { \n      let params = useParams(); \n      let location = useLocation(); \n      let navigate = useNavigate(); \n      return ( \n          <Component {...props} router={{params, location, navigate}}/> \n      ) \n  } \n  return ComponentWithRouterProp; \n} \n\nexport default withRouter;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getStatus, getUserProfile, savePhoto, saveProfile, upDateStatuses } from '../../redux/profile_reducer';\r\nimport Profile from './Profile';\r\nimport withRouter from '../../hoc/withProfileUrl';\r\nimport { compose } from 'redux';\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\nimport { LoginPage } from '../Login/LoginPage';\r\n\r\n\r\n\r\ntype ParamsType = {\r\n  params: { userId: string}\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchPropsType = {\r\n  getUserProfile: (userId: number ) => void\r\n  getStatus: (userId: number ) => void\r\n  upDateStatuses: (userId: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType | null) => Promise<any>\r\n}\r\n\r\ntype IsOwnType = {\r\n  router: ParamsType\r\n}\r\n\r\ntype PropsType = IsOwnType & MapPropsType & MapDispatchPropsType;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.router.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authoraizerUserId;\r\n    }\r\n    \r\n    if (!userId) {\r\n      console.error('Id shoud be exist in URL params or state')\r\n    } else {\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId );\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  };\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    this.props.profile?.fullName ?  document.title = this.props.profile?.fullName : document.title = '';\r\n    let userId: number | null = +this.props.router.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authoraizerUserId;\r\n      if (!userId) {\r\n        return <Navigate to='/login' />\r\n      }\r\n    }\r\n\r\n    return (\r\n      \r\n      <div >\r\n        <h1>Profile</h1>\r\n        <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n          isOwner={!this.props.router.params.userId}\r\n          upDateStatuses={this.props.upDateStatuses}\r\n          savePhoto={this.props.savePhoto}\r\n          saveProfile={this.props.saveProfile}\r\n          isFecbg={this.props.isFecbg}\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authoraizerUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    isFecbg: state.userPage.isFeching\r\n  })\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n\r\n  connect(mapStateToProps, { getUserProfile, getStatus, upDateStatuses, savePhoto, saveProfile }),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"names":["props","dispatch","useDispatch","status","useSelector","state","profilePage","useState","editMode","setEditMode","statuse","setStatus","useEffect","className","style","disabled","isOwner","value","onClick","onChange","e","currentTarget","autoFocus","onBlur","upDateStatuses","reduxForm","form","handleSubmit","profile","closeEditMode","error","isFecbg","Preloader","createPortal","s","onSubmit","creatField","cantNull","Input","type","Textarea","Object","keys","contacts","map","key","id","urlLing","marginTop","document","getElementById","getisSetDate","isSetDate","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","some","k","length","Contact","contactTitle","contactValua","savePhoto","saveProfile","history","useNavigate","getFormData","values","alt","src","photos","large","userPhoto","name","target","files","userId","actions","initialValues","photoMe","getMyPhoto","se","defaul","messege","count","GetFormDateDedux","maxWidth","reqiaret","maxLenght10","float","maxLengthCreator","React","postDate","getPostDate","dialogElements","reverse","phra","newPostText","reset","isDialogsLoads","getSsFeching","Component","params","useParams","location","useLocation","navigate","router","ProfileContainer","this","authoraizerUserId","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","title","to","compose","connect","auth","isAuth","userPage","isFeching","withRouter"],"sourceRoot":""}